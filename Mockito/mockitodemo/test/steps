//step 1

 @Test
    void findTheGreatestFromAllData_basicScenario() {

        DataService dataServiceMock = mock(DataService.class);

        when(dataServiceMock.reteriveAllData()).thenReturn(new int[]{25,15,5});

        SomeBusinessImpl businessIml=new SomeBusinessImpl(dataServiceMock);

        assertEquals(25, businessIml.findTheGreatestFromAllData());
    }

    @Test
        void findTheGreatestFromAllData_OneValue() {
            DataService dataServiceMock = mock(DataService.class);
            when(dataServiceMock.reteriveAllData()).thenReturn(new int[]{35});
            SomeBusinessImpl businessIml=new SomeBusinessImpl(dataServiceMock);
            assertEquals(35, businessIml.findTheGreatestFromAllData());
        }


//step 2

    @Mock
    private DataService dataServiceMock;

    @InjectMocks
    private SomeBusinessImpl businessImpl;

    @Test
    void findTheGreatestFromAllData_basicScenario() {
        when(dataServiceMock.reteriveAllData()).thenReturn(new int[]{25,15,5});
        SomeBusinessImpl businessImpl=new SomeBusinessImpl(dataServiceMock);
    }

     @Test
        void findTheGreatestFromAllData_OneValue() {
            when(dataServiceMock.reteriveAllData()).thenReturn(new int[]{35});
            assertEquals(35, businessImpl.findTheGreatestFromAllData());
        }